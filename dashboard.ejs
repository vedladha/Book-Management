<!DOCTYPE html>
<html>
  <head>
    <title>Dashboard</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        background-color: #35dc86;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 120vh;
        margin: 0;
        position: relative;
      }

      .container {
        background-color: #f2e8db;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        text-align: center;
      }

      h1 {
        margin-bottom: 20px;
        color: #333;
      }

      .logout-container {
        position: fixed;
        top: 20px;
        right: 20px;
      }

      .logout-container button {
        background-color: rgb(59, 28, 181);
        color: white;
        border: none;
        padding: 10px 40px;
        cursor: pointer;
        font-size: 16px;
        border-radius: 4px;
      }

      .logout-container button:hover {
        background-color: #1c2bff;
      }

      form {
        margin-bottom: 20px;
      }

      input,
      button {
        padding: 10px;
        margin: 5px 0;
        width: calc(100% - 20px);
      }

      button {
        background-color: #a9121c;
        color: white;
        border: none;
        cursor: pointer;
        border-radius: 4px;
      }

      button:hover {
        background-color: #0056b3;
      }

      .product-list {
        margin-top: 20px;
      }

      table {
        width: 100%;
        border-collapse: collapse;
      }

      table th,
      td {
        border: 1px solid #ddd;
      }

      th,
      td {
        padding: 8px;
        text-align: left;
      }

      th {
        background-color: #f2f2f2;
      }

      /* Modal styles */
      .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgb(0, 0, 0);
        background-color: rgba(0, 0, 0, 0.4);
      }

      .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 500px;
        border-radius: 8px;
      }

      .modal-header,
      .modal-body,
      .modal-footer {
        padding: 10px;
      }

      .modal-header {
        border-bottom: 1px solid #ddd;
      }

      .modal-footer {
        border-top: 1px solid #ddd;
        text-align: right;
      }

      .modal-footer button {
        margin-left: 10px;
      }
    </style>
    <script>
      function confirmLogout() {
        const logoutModal = document.getElementById("logoutModal");
        logoutModal.style.display = "block";
      }

      function closeModal() {
        const logoutModal = document.getElementById("logoutModal");
        logoutModal.style.display = "none";
      }

      window.onclick = function (event) {
        const logoutModal = document.getElementById("logoutModal");
        if (event.target == logoutModal) {
          logoutModal.style.display = "none";
        }
      };
    </script>
  </head>
  <body>
    <div class="logout-container">
      <button onclick="confirmLogout()">Logout</button>
    </div>

    <div class="modal" id="logoutModal">
      <div class="modal-content">
        <div class="modal-header">
          <h2 style="text-align: center">Confirm Logout</h2>
        </div>
        <div class="modal-body" style="text-align: center">
          Are you sure you want to logout?
        </div>
        <div class="modal-footer">
          <button type="button" onclick="closeModal()">Cancel</button>
          <button type="button" id="confirmLogoutBtn">Logout</button>
        </div>
      </div>
    </div>

    <div class="container">
      <h1>Welcome to the Dashboard <%= email %></h1>

      <!-- Create product form -->
      <form id="createProductForm">
        <h2>Create Product</h2>
        <input
          type="text"
          id="title"
          name="title"
          placeholder="Title"
          required
        />
        <input
          type="text"
          id="description"
          name="description"
          placeholder="Description"
          required
        />
        <input
          type="number"
          id="price"
          name="price"
          placeholder="Price"
          required
        />
        <input
          type="number"
          id="quantity"
          name="quantity"
          placeholder="Quantity"
          required
        />
        <button type="submit">Submit</button>
      </form>

      <div class="product-list" id="productList">
        <h2>Product List</h2>
        <table>
          <thead>
            <tr>
              <th>Title</th>
              <th>Description</th>
              <th>Price</th>
              <th>Quantity</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="productTableBody"></tbody>
        </table>
      </div>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        fetchProducts();
      });

      const getTokenFromCookies = () => {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; token=`);
        if (parts.length == 2) return parts.pop().split(";").shift();
      };

      const token = getTokenFromCookies();

      // Fetch and display products
      async function fetchProducts() {
        try {
          const response = await fetch("/getProduct", {
            method: "GET",
          });
          const products = await response.json();
          const productTableBody = document.getElementById("productTableBody");
          productTableBody.innerHTML = ""; // Clear existing rows
          products.forEach((product) => {
            const row = document.createElement("tr");
            row.innerHTML = `
            <td>${product.title}</td>
            <td>${product.description}</td>
            <td>${product.price}</td>
            <td>${product.quantity}</td>
            <td>
              <button type="button" onclick="editProduct('${product._id}', this)">Update</button>
              <button type="button" onclick="deleteProduct('${product._id}');">Delete</button>
            </td>
          `;
            productTableBody.appendChild(row);
          });
        } catch (error) {
          console.error("Error Fetching Products:", error);
        }
      }

      document
        .getElementById("createProductForm")
        .addEventListener("submit", async (e) => {
          e.preventDefault();
          try {
            const title = document.getElementById("title").value;
            const description = document.getElementById("description").value;
            const price = document.getElementById("price").value;
            const quantity = document.getElementById("quantity").value;
            const response = await fetch("/createProduct", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ title, description, price, quantity }),
            });
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }

            alert("Product Created");
            fetchProducts();

            // Clear the form fields
            document.getElementById("createProductForm").reset();
          } catch (error) {
            console.log("Error Creating Product:", error);
          }
        });

      // Delete product
      async function deleteProduct(id) {
        if (!confirm("Are you sure you want to delete this product?")) {
          return;
        }
        try {
          const response = await fetch(`/deleteProduct/${id}`, {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json",
            },
          });
          if (!response.ok) {
            const errorText = await response.text();
            throw new Error(
              `HTTP error! status: ${response.status}, Response:${errorText}`
            );
          }
          alert("Product Deleted Successfully!");
          fetchProducts();
        } catch (error) {
          console.log("Error Deleting Product:", error);
          alert(`Error deleting product: ${error.message}`);
        }
      }

      // Edit product
      function editProduct(id, button) {
        const row = button.parentNode.parentNode;
        const cells = row.querySelectorAll("td");
        const title = cells[0].innerText;
        const description = cells[1].innerText;
        const price = cells[2].innerText;
        const quantity = cells[3].innerText;

        cells[0].innerHTML = `<input type="text" value="${title}" />`;
        cells[1].innerHTML = `<input type="text" value="${description}" />`;
        cells[2].innerHTML = `<input type="number" value="${price}" />`;
        cells[3].innerHTML = `<input type="number" value="${quantity}" />`;

        button.textContent = "Save";
        button.onclick = () => saveProduct(id, button);

        const cancelButton = document.createElement("button");
        cancelButton.textContent = "Cancel";
        cancelButton.onclick = () => fetchProducts();
        button.parentNode.appendChild(cancelButton);
      }

      async function saveProduct(id, button) {
        const row = button.parentNode.parentNode;
        const cells = row.querySelectorAll("td");
        const newTitle = cells[0].querySelector("input").value;
        const newDescription = cells[1].querySelector("input").value;
        const newPrice = cells[2].querySelector("input").value;
        const newQuantity = cells[3].querySelector("input").value;

        try {
          const response = await fetch(`/updateProduct/${id}`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              title: newTitle,
              description: newDescription,
              price: newPrice,
              quantity: newQuantity,
            }),
          });

          if (!response.ok) {
            const errorText = await response.text();
            throw new Error(
              `HTTP error! status: ${response.status}, Response: ${errorText}`
            );
          }
          alert("Product Updated Successfully!");
          fetchProducts();
        } catch (error) {
          console.log("Error Updating Product:", error);
          alert(`Error Updating product: ${error.message}`);
        }
      }

      // Logout
      document
        .getElementById("confirmLogoutBtn")
        .addEventListener("click", async function () {
          const response = await fetch("/logout", {
            method: "POST",
            credentials: "same-origin",
          });

          if (response.ok) {
            window.location.href = "/";
          } else {
            alert("Logout failed");
          }
        });
    </script>
  </body>
</html>
